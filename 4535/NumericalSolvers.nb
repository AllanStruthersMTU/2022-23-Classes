(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     92051,       2066]
NotebookOptionsPosition[     88471,       2000]
NotebookOutlinePosition[     88968,       2018]
CellTagsIndexPosition[     88925,       2015]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Numerical ODE Solvers", "Title",
 CellChangeTimes->{{3.8762157882877216`*^9, 
  3.8762157927291117`*^9}},ExpressionUUID->"cfe02285-7314-4cf7-afc8-\
b2cfe098c8c5"],

Cell[CellGroupData[{

Cell["Design Principle(s)", "Chapter",
 CellChangeTimes->{{3.8762158610603175`*^9, 3.8762158679276686`*^9}, 
   3.8762159021487584`*^9, {3.8762162976755314`*^9, 
   3.8762163058877697`*^9}},ExpressionUUID->"d6141ec4-7b22-4563-abc5-\
619cd38f3e36"],

Cell[TextData[{
 "A good \[OpenCurlyDoubleQuote]black box\[CloseCurlyDoubleQuote] ODE solver \
should automatically efficiently compute accurate approximations to a broad \
range of ODEs.  Most such solvers ODE solvers solve 1st order systems.  As we \
have seen, both Matlab and Python require the user to reduce a general system \
of ODEs to a system of first order ODEs.  We are going to see how some \
families of solvers are defined and implemented.  Our n-dimensional IVP \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"y", "'"}], "=", 
    RowBox[{"f", "(", 
     RowBox[{"t", ",", "y"}], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "7293e16b-d95c-48fc-9e84-db23967ad7a4"],
 "  and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"y", "(", "0", ")"}], "=", 
    SubscriptBox["y", "0"]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "871a9fc8-c677-4822-bea4-36e536caacde"],
 "\nis defined by the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"\[DoubleStruckCapitalR]", "\[Times]", 
      SuperscriptBox["\[DoubleStruckCapitalR]", "n"]}]}], "\[Rule]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", "n"]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "37dee7b5-4c00-45e8-ae42-b8e59d3f8c29"],
 " and the initial condition ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "0"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "50939393-4256-4abf-b0dd-10b8f522f19f"],
 ". "
}], "Text",
 CellChangeTimes->{{3.876215874670247*^9, 3.876216293326799*^9}, {
  3.8762172548271713`*^9, 
  3.87621730007905*^9}},ExpressionUUID->"f2a5fa57-86bc-4e20-b6a0-\
fba8bfcb25fc"],

Cell[CellGroupData[{

Cell["Euler\[CloseCurlyQuote]s Method", "Section",
 CellChangeTimes->{{3.8762158348629847`*^9, 3.8762158433281527`*^9}, {
  3.8762163318688674`*^9, 
  3.8762163356437693`*^9}},ExpressionUUID->"23c9e758-370c-4cea-9850-\
b132f79b4c73"],

Cell[TextData[{
 "We learned the simplest ODE solver in Calculus I.   The standard \
presentation is to substitute the approximation \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"y", "'"}], 
     RowBox[{"(", "t", ")"}]}], "\[TildeTilde]", 
    FractionBox[
     RowBox[{
      RowBox[{"y", "(", 
       RowBox[{"t", "+", "h"}], ")"}], "-", 
      RowBox[{"y", "(", "t", ")"}]}], "h"]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "a9b38846-3244-49af-956c-474328dd75a3"],
 "\nfor some small into the ODE to get\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"y", "(", 
       RowBox[{"t", "+", "h"}], ")"}], "-", 
      RowBox[{"y", "(", "t", ")"}]}], "h"], "=", 
    RowBox[{"f", "(", 
     RowBox[{"t", ",", 
      RowBox[{"y", "(", "t", ")"}]}], ")"}], " "}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "a97747fc-f5d4-439b-a488-fefa6dff9a84"],
 "\nand rearrange to get\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"y", "(", 
     RowBox[{"t", "+", "h"}], ")"}], "\[TildeTilde]", 
    RowBox[{
     RowBox[{"y", "(", "t", ")"}], "+", 
     RowBox[{"h", " ", 
      RowBox[{"f", "(", 
       RowBox[{"t", ",", 
        RowBox[{"y", "(", "t", ")"}]}], ")"}]}]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "7994ac76-c0cc-4b3e-84d7-58fd4b190039"],
 ".\nWith a fixed small step size ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "75ee25cf-8811-48f9-850f-eb667437848b"],
 " this allows us to generate approximate values of ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "k"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "63e36f64-6a2d-4623-b0b5-a7ca772e185b"],
 " at the sequence of equally spaced t-value ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["t", "k"], "=", 
    RowBox[{"k", " ", "h"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "0ad0ecee-a47a-4b82-944a-d6712bd6475c"],
 ". "
}], "Text",
 CellChangeTimes->{{3.87621579746796*^9, 3.87621585517399*^9}, {
  3.876216339361863*^9, 
  3.8762166652609024`*^9}},ExpressionUUID->"0ca66a3b-99b1-4f4d-920c-\
716efb9c1d5d"],

Cell["The code is pretty simple! ", "Text",
 CellChangeTimes->{{3.8762169776435566`*^9, 
  3.876216982384988*^9}},ExpressionUUID->"f2f92ad0-0aed-484f-8294-\
6d6d1dd5f1bc"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"EulerStep", "[", "f_", "]"}], "[", 
    RowBox[{"{", 
     RowBox[{"h_", ",", "t_", ",", "y_"}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"h", ",", 
     RowBox[{"t", "+", "h"}], ",", 
     RowBox[{"y", "+", 
      RowBox[{"h", " ", 
       RowBox[{"f", "[", 
        RowBox[{"t", ",", "y"}], "]"}]}]}]}], "}"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"t_", ",", "y_"}], "]"}], ":=", "y"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"h", "=", "0.1"}], ";", " ", 
  RowBox[{"t0", "=", "0.0"}], ";", " ", 
  RowBox[{"y0", "=", "1.0"}], ";", " ", 
  RowBox[{"EulerSteps", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"EulerData", "=", 
  RowBox[{"NestList", "[", 
   RowBox[{
    RowBox[{"EulerStep", "[", "f", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"h", ",", "t0", ",", "y0"}], "}"}], ",", "EulerSteps"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", " ", 
  RowBox[{"EulerData", "\[LeftDoubleBracket]", 
   RowBox[{"All", ",", 
    RowBox[{"2", ";;", "3"}]}], "\[RightDoubleBracket]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.87621667129237*^9, 3.8762168809169283`*^9}, {
   3.876216920802514*^9, 3.8762169562288313`*^9}, 
   3.876217188365733*^9},ExpressionUUID->"4a31a1d9-0a4e-46a7-9dfa-\
c441d332c84b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.1`", ",", "1.1`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.2`", ",", "1.2100000000000002`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.30000000000000004`", ",", "1.3310000000000002`"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.4`", ",", "1.4641000000000002`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.5`", ",", "1.61051`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.6`", ",", "1.7715610000000002`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.7`", ",", "1.9487171`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.7999999999999999`", ",", "2.1435888100000002`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.8999999999999999`", ",", "2.357947691`"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.9999999999999999`", ",", "2.5937424601`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8762168321660233`*^9, 3.876216882434457*^9}, 
   3.876216935606059*^9},
 CellLabel->
  "Out[276]=",ExpressionUUID->"1d9b0314-3617-4acd-a5da-53a64bd38f10"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`], 
    AbsoluteThickness[1.6], 
    PointBox[{{0., 1.}, {0.1, 1.1}, {0.2, 1.2100000000000002`}, {
     0.30000000000000004`, 1.3310000000000002`}, {0.4, 1.4641000000000002`}, {
     0.5, 1.61051}, {0.6, 1.7715610000000002`}, {0.7, 1.9487171}, {
     0.7999999999999999, 2.1435888100000002`}, {0.8999999999999999, 
     2.357947691}, {0.9999999999999999, 2.5937424601}}]}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.9999999999999999}, {0, 2.5937424601}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8762168321660233`*^9, 3.876216882434457*^9}, 
   3.876216935649955*^9},
 CellLabel->
  "Out[277]=",ExpressionUUID->"c5cd2a59-bace-4917-98c0-b4fa6c390d3d"]
}, Open  ]],

Cell["\<\
Fixed step-size Euler does not fit our \[OpenCurlyDoubleQuote]Design \
Principles\[CloseCurlyDoubleQuote] because we have no idea if the answer is \
accurate and we have no idea if we picked a reasonable step size h.  What we \
really want is some way to automatically tune the step size to the solution \
of the ODE.  This is not as hard as it sounds! \
\>", "Text",
 CellChangeTimes->{{3.8762172064040356`*^9, 3.8762172419898663`*^9}, {
  3.876217308102703*^9, 
  3.876217441764271*^9}},ExpressionUUID->"9c9f4187-b15b-4799-8fab-\
619916f54d62"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Euler\[CloseCurlyQuote]s Method (Alternate Derivation) and Taylor \
Methods", "Section",
 CellChangeTimes->{{3.8762158348629847`*^9, 3.8762158433281527`*^9}, {
  3.8762163318688674`*^9, 3.8762163356437693`*^9}, {3.876217458590097*^9, 
  3.876217472979748*^9}, {3.87621764731898*^9, 
  3.8762176551499915`*^9}},ExpressionUUID->"9f85497e-0a25-4d0c-a92f-\
da594f2baf02"],

Cell[TextData[{
 "Another way to motivate Euler\[CloseCurlyQuote]s method is to look at the \
ODE\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"y", "'"}], 
     RowBox[{"(", "t", ")"}]}], "=", 
    RowBox[{"f", "(", 
     RowBox[{"t", ",", 
      RowBox[{"y", "(", "t", ")"}]}], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "185913be-5a1a-4604-addf-73ab0990eeb3"],
 "\nand say use the linear approximation\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"y", "(", 
      RowBox[{
       SubscriptBox["t", "k"], "+", "h"}], ")"}], "\[TildeTilde]", 
     RowBox[{
      RowBox[{"y", "(", 
       SubscriptBox["t", "k"], ")"}], "+", 
      RowBox[{"h", " ", 
       RowBox[{"y", "'"}], 
       RowBox[{"(", 
        SubscriptBox["t", "k"], ")"}]}]}]}], "=", 
    RowBox[{
     RowBox[{"y", "(", 
      SubscriptBox["t", "k"], ")"}], "+", 
     RowBox[{"h", " ", 
      RowBox[{"f", "(", 
       RowBox[{
        SubscriptBox["t", "k"], ",", 
        RowBox[{"y", "(", 
         SubscriptBox["t", "k"], ")"}]}], ")"}]}]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "4cd01267-85eb-4bd9-b60b-6f2a4cc42136"],
 "\nwriting ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["h", "k"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "2b0990f8-15f2-4b4c-aa64-c1bf6ed19e50"],
 " for the size of step k, and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["t", "k"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "5bed00e9-eb7b-4b54-b603-354495336ca9"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "k"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "daad85cf-7aa7-4a9a-b179-8a1657084954"],
 " for the approximation generated this way we have\n\t",
 Cell[BoxData[
  FormBox[GridBox[{
     {
      SubscriptBox["t", 
       RowBox[{"k", "+", "1"}]], "=", 
      SubscriptBox["t", "k"], "+", 
      SubscriptBox["h", "k"]},
     {
      SubscriptBox["y", 
       RowBox[{"k", "+", "1"}]], "=", 
      SubscriptBox["y", "k"], "+", 
      RowBox[{
       SubscriptBox["h", "k"], 
       RowBox[{"f", "(", 
        RowBox[{
         SubscriptBox["t", "k"], ",", 
         SubscriptBox["y", "k"]}], ")"}]}]},
     {
      SubscriptBox["h", 
       RowBox[{"k", "+", "1"}]], "=", "?", " ", " "}
    }], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "1aff5fed-6226-45cb-b32e-6d803c0b39d6"],
 "\nWith some way of choosing the step sizes we would get an approximate \
solution values ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["y", "k"], "}"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "9d206815-b4e1-4696-86d7-5c7ba01b2e46"],
 " at the points ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["t", "k"], "}"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "54b8910e-6df4-4bf9-9a01-e5471891ae12"],
 "."
}], "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.87621579746796*^9, 3.87621585517399*^9}, {
  3.876216339361863*^9, 3.8762166652609024`*^9}, {3.8762174810143814`*^9, 
  3.876217956468877*^9}},ExpressionUUID->"eb40bd3e-f6f4-438e-98a8-\
733e39cce0b2"],

Cell[TextData[{
 "The quadratic approximation\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"y", "(", 
      RowBox[{
       SubscriptBox["t", "k"], "+", "h"}], ")"}], "\[TildeTilde]", 
     RowBox[{
      RowBox[{"y", "(", 
       SubscriptBox["t", "k"], ")"}], "+", 
      RowBox[{"h", " ", 
       RowBox[{"y", "'"}], 
       RowBox[{"(", 
        SubscriptBox["t", "k"], ")"}]}], "+", 
      RowBox[{
       FractionBox[
        SuperscriptBox["h", "2"], "2"], 
       RowBox[{"y", "''"}], 
       RowBox[{"(", 
        SubscriptBox["t", "k"], ")"}]}]}]}], "=", 
    RowBox[{
     RowBox[{"y", "(", 
      SubscriptBox["t", "k"], ")"}], "+", 
     RowBox[{"h", " ", 
      RowBox[{"f", "(", 
       RowBox[{
        SubscriptBox["t", "k"], ",", 
        RowBox[{"y", "(", 
         SubscriptBox["t", "k"], ")"}]}], ")"}]}], "+", 
     RowBox[{
      FractionBox[
       SuperscriptBox["h", "2"], "2"], "?"}]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "230ded04-fd22-4e80-9646-3f064cc92959"],
 "\nshould give a better answer if we can work out some way to compute (or \
approximate) ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"y", "''"}], 
    RowBox[{"(", 
     SubscriptBox["t", "k"], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "e3e1d14c-45b1-4970-9450-0d2690dc9a92"],
 ".  The easiest thing to think about is to just differentiate the ODE\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"y", "'"}], 
     RowBox[{"(", "t", ")"}]}], "=", 
    RowBox[{"f", "(", 
     RowBox[{"t", ",", 
      RowBox[{"y", "(", "t", ")"}]}], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "669d77ba-edcb-4414-a89c-9175fc20ac9e"],
 "\nto get\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], 
     RowBox[{"(", "t", ")"}]}], "=", 
    RowBox[{
     FractionBox["d", "dt"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"f", "(", 
        RowBox[{"t", ",", 
         RowBox[{"y", "(", "t", ")"}]}], ")"}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{
          SubscriptBox["f", "t"], "(", 
          RowBox[{"t", ",", 
           RowBox[{"y", "(", "t", ")"}]}], ")"}], "+", 
         RowBox[{
          RowBox[{
           RowBox[{
            SubscriptBox["f", "y"], "(", 
            RowBox[{"t", ",", 
             RowBox[{"y", "(", "t", ")"}]}], ")"}], ".", 
           RowBox[{"y", "'"}]}], 
          RowBox[{"(", "t", ")"}]}]}], "=", 
        RowBox[{
         RowBox[{
          SubscriptBox["f", "t"], "(", 
          RowBox[{"t", ",", 
           RowBox[{"y", "(", "t", ")"}]}], ")"}], "+", 
         RowBox[{
          RowBox[{
           SubscriptBox["f", "y"], "(", 
           RowBox[{"t", ",", 
            RowBox[{"y", "(", "t", ")"}]}], ")"}], ".", 
          RowBox[{"f", "(", 
           RowBox[{"t", ",", 
            RowBox[{"y", "(", "t", ")"}]}], ")"}]}]}]}]}]}]}]}], 
   TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "4e3b61b9-aba6-4b2c-b84d-5c635aab7ea5"]
}], "Text",
 CellChangeTimes->{{3.876217963159026*^9, 3.876218230550353*^9}, {
  3.8762184751243496`*^9, 
  3.8762184799115915`*^9}},ExpressionUUID->"fc704761-b0a4-44f4-a061-\
50970a93ff5a"],

Cell["The code is not that bad! ", "Text",
 CellChangeTimes->{{3.8762169776435566`*^9, 3.876216982384988*^9}, {
  3.8762189527420607`*^9, 
  3.876218955647626*^9}},ExpressionUUID->"1db8daee-738e-4496-98d8-\
23265f3f9fe4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"T2Step", "[", 
     RowBox[{"f_", ",", "ft_", ",", "fy_"}], "]"}], "[", 
    RowBox[{"{", 
     RowBox[{"h_", ",", "t_", ",", "y_"}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"h", ",", 
     RowBox[{"t", "+", "h"}], ",", 
     RowBox[{"y", "+", 
      RowBox[{"h", " ", 
       RowBox[{"f", "[", 
        RowBox[{"t", ",", "y"}], "]"}]}], "+", 
      RowBox[{
       FractionBox[
        SuperscriptBox["h", "2"], "2"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"ft", "[", 
          RowBox[{"t", ",", "y"}], "]"}], "+", 
         RowBox[{
          RowBox[{"fy", "[", 
           RowBox[{"t", ",", "y"}], "]"}], "*", 
          RowBox[{"f", "[", 
           RowBox[{"t", ",", "y"}], "]"}]}]}], ")"}]}]}]}], "}"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"t_", ",", "y_"}], "]"}], ":=", "y"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ft", "[", 
   RowBox[{"t_", ",", "y_"}], "]"}], ":=", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fy", "[", 
   RowBox[{"t_", ",", "y_"}], "]"}], ":=", "1"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"h", "=", "0.1"}], ";", " ", 
  RowBox[{"t0", "=", "0.0"}], ";", " ", 
  RowBox[{"y0", "=", "1.0"}], ";", " ", 
  RowBox[{"T2Steps", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"EulerData", "=", 
  RowBox[{"NestList", "[", 
   RowBox[{
    RowBox[{"T2Step", "[", 
     RowBox[{"f", ",", "ft", ",", "fy"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"h", ",", "t0", ",", "y0"}], "}"}], ",", "T2Steps"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", " ", 
  RowBox[{"EulerData", "\[LeftDoubleBracket]", 
   RowBox[{"All", ",", 
    RowBox[{"2", ";;", "3"}]}], "\[RightDoubleBracket]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.87621667129237*^9, 3.8762168809169283`*^9}, {
   3.876216920802514*^9, 3.8762169562288313`*^9}, 3.876217188365733*^9, {
   3.876218255481412*^9, 3.876218400535222*^9}, {3.876218436741312*^9, 
   3.8762185650398083`*^9}, {3.8762186102162256`*^9, 3.876218627354473*^9}, {
   3.876218660821737*^9, 3.876218679549381*^9}},
 CellLabel->
  "In[324]:=",ExpressionUUID->"30a662e8-9a11-4978-9d11-48670079c504"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.1`", ",", "1.105`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.2`", ",", "1.221025`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.30000000000000004`", ",", "1.349232625`"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.4`", ",", "1.4909020506250001`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.5`", ",", "1.6474467659406251`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.6`", ",", "1.8204286763643909`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.7`", ",", "2.011573687382652`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.7999999999999999`", ",", "2.2227889245578303`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.8999999999999999`", ",", "2.4561817616364023`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.9999999999999999`", ",", "2.7140808466082245`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8762168321660233`*^9, 3.876216882434457*^9}, 
   3.876216935606059*^9, {3.8762185146839466`*^9, 3.876218541589255*^9}, {
   3.876218602149009*^9, 3.876218628184208*^9}, 3.8762186800590944`*^9},
 CellLabel->
  "Out[329]=",ExpressionUUID->"5b08c54b-062a-427e-8b69-27b16d678204"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`], 
    AbsoluteThickness[1.6], 
    PointBox[{{0., 1.}, {0.1, 1.105}, {0.2, 1.221025}, {0.30000000000000004`, 
     1.349232625}, {0.4, 1.4909020506250001`}, {0.5, 1.6474467659406251`}, {
     0.6, 1.8204286763643909`}, {0.7, 2.011573687382652}, {0.7999999999999999,
      2.2227889245578303`}, {0.8999999999999999, 2.4561817616364023`}, {
     0.9999999999999999, 2.7140808466082245`}}]}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.9999999999999999}, {0, 2.7140808466082245`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8762168321660233`*^9, 3.876216882434457*^9}, 
   3.876216935606059*^9, {3.8762185146839466`*^9, 3.876218541589255*^9}, {
   3.876218602149009*^9, 3.876218628184208*^9}, 3.8762186801156273`*^9},
 CellLabel->
  "Out[330]=",ExpressionUUID->"28c52614-f9a2-4667-ada6-ed8b357b6f94"]
}, Open  ]],

Cell["\<\
Of course, not everything has such clean derivatives as our simples example!\
\>", "Text",
 CellChangeTimes->{{3.876218689559708*^9, 
  3.8762187246287813`*^9}},ExpressionUUID->"4f957534-85f9-4023-89d0-\
559413617dd5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"T2Step", "[", 
     RowBox[{"f_", ",", "ft_", ",", "fy_"}], "]"}], "[", 
    RowBox[{"{", 
     RowBox[{"h_", ",", "t_", ",", "y_"}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"h", ",", 
     RowBox[{"t", "+", "h"}], ",", 
     RowBox[{"y", "+", 
      RowBox[{"h", " ", 
       RowBox[{"f", "[", 
        RowBox[{"t", ",", "y"}], "]"}]}], "+", 
      RowBox[{
       FractionBox[
        SuperscriptBox["h", "2"], "2"], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"ft", "[", 
          RowBox[{"t", ",", "y"}], "]"}], "+", 
         RowBox[{
          RowBox[{"fy", "[", 
           RowBox[{"t", ",", "y"}], "]"}], "*", 
          RowBox[{"f", "[", 
           RowBox[{"t", ",", "y"}], "]"}]}]}], ")"}]}]}]}], "}"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"t_", ",", "y_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"y", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"t", " ", "y"}], "]"}]}], "+", " ", 
   RowBox[{"Cos", "[", "y", "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ft", "[", 
   RowBox[{"t_", ",", "y_"}], "]"}], ":=", 
  RowBox[{
   SuperscriptBox["y", "2"], " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"t", " ", "y"}], "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fy", "[", 
   RowBox[{"t_", ",", "y_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"t", " ", "y", " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"t", " ", "y"}], "]"}]}], "-", 
   RowBox[{"Sin", "[", "y", "]"}], "+", 
   RowBox[{"Sin", "[", 
    RowBox[{"t", " ", "y"}], "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"h", "=", "0.1"}], ";", " ", 
  RowBox[{"t0", "=", "0.0"}], ";", " ", 
  RowBox[{"y0", "=", "1.0"}], ";", " ", 
  RowBox[{"T2Steps", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"EulerData", "=", 
  RowBox[{"NestList", "[", 
   RowBox[{
    RowBox[{"T2Step", "[", 
     RowBox[{"f", ",", "ft", ",", "fy"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"h", ",", "t0", ",", "y0"}], "}"}], ",", "T2Steps"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", " ", 
  RowBox[{"EulerData", "\[LeftDoubleBracket]", 
   RowBox[{"All", ",", 
    RowBox[{"2", ";;", "3"}]}], "\[RightDoubleBracket]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.87621667129237*^9, 3.8762168809169283`*^9}, {
   3.876216920802514*^9, 3.8762169562288313`*^9}, 3.876217188365733*^9, {
   3.876218255481412*^9, 3.876218400535222*^9}, {3.876218436741312*^9, 
   3.8762185650398083`*^9}, {3.8762186102162256`*^9, 3.876218627354473*^9}},
 CellLabel->
  "In[317]:=",ExpressionUUID->"d6d26731-d070-44fd-94c5-1445827d06a7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.1`", ",", "1.0567569870197497`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.2`", ",", "1.1206349057118012`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.30000000000000004`", ",", "1.193602515213244`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.4`", ",", "1.2779793462694233`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.5`", ",", "1.3763852819589673`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.6`", ",", "1.491430664445235`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.7`", ",", "1.6247987026196267`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.7999999999999999`", ",", "1.7751463312794178`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.8999999999999999`", ",", "1.934449495744259`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.1`", ",", "0.9999999999999999`", ",", "2.0844690031311175`"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8762168321660233`*^9, 3.876216882434457*^9}, 
   3.876216935606059*^9, {3.8762185146839466`*^9, 3.876218541589255*^9}, {
   3.876218602149009*^9, 3.876218628184208*^9}},
 CellLabel->
  "Out[322]=",ExpressionUUID->"313a683e-77a7-4773-9c6a-f8490e1ba130"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`], 
    AbsoluteThickness[1.6], 
    PointBox[{{0., 1.}, {0.1, 1.0567569870197497`}, {0.2, 
     1.1206349057118012`}, {0.30000000000000004`, 1.193602515213244}, {0.4, 
     1.2779793462694233`}, {0.5, 1.3763852819589673`}, {0.6, 
     1.491430664445235}, {0.7, 1.6247987026196267`}, {0.7999999999999999, 
     1.7751463312794178`}, {0.8999999999999999, 1.934449495744259}, {
     0.9999999999999999, 2.0844690031311175`}}]}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.9999999999999999}, {0, 2.0844690031311175`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8762168321660233`*^9, 3.876216882434457*^9}, 
   3.876216935606059*^9, {3.8762185146839466`*^9, 3.876218541589255*^9}, {
   3.876218602149009*^9, 3.876218628233531*^9}},
 CellLabel->
  "Out[323]=",ExpressionUUID->"63cbfb66-34c0-4524-8a86-c9b83d197a4d"]
}, Open  ]],

Cell[TextData[{
 "To generate the T# scheme all we need to do is differentiate \n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"y", "''"}], 
     RowBox[{"(", "t", ")"}]}], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["f", "t"], "(", 
      RowBox[{"t", ",", 
       RowBox[{"y", "(", "t", ")"}]}], ")"}], "+", 
     RowBox[{
      RowBox[{
       SubscriptBox["f", "y"], "(", 
       RowBox[{"t", ",", 
        RowBox[{"y", "(", "t", ")"}]}], ")"}], ".", 
      RowBox[{"f", "(", 
       RowBox[{"t", ",", 
        RowBox[{"y", "(", "t", ")"}]}], ")"}]}]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "68f4d6af-4dc6-4f19-a7a9-b7af71fb9fc2"],
 "\t\nagain to get\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"y", "'''"}], "=", 
    RowBox[{
     RowBox[{
      FractionBox["d", "dt"], 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["f", "t"], "+", 
        RowBox[{
         SubscriptBox["f", "y"], "f"}]}], ")"}]}], "=", 
     RowBox[{
      RowBox[{
       SubscriptBox["f", "tt"], "+", 
       RowBox[{
        SubscriptBox["f", "yt"], 
        RowBox[{"y", "'"}]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["f", "ty"], "+", 
          SubscriptBox["f", "yy"]}], ")"}], "f"}], "+", 
       RowBox[{
        SubscriptBox["f", "y"], 
        FractionBox["d", "dt"], 
        RowBox[{"(", "f", ")"}]}]}], "=", 
      RowBox[{
       RowBox[{
        SubscriptBox["f", "tt"], "+", 
        RowBox[{
         SubscriptBox["f", "yt"], 
         RowBox[{"y", "'"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["f", "ty"], "+", 
           SubscriptBox["f", "yy"]}], ")"}], "f"}], "+", 
        RowBox[{
         SubscriptBox["f", "y"], "(", 
         RowBox[{
          SubscriptBox["f", "t"], "+", 
          RowBox[{
           SubscriptBox["f", "y"], 
           RowBox[{"y", "'"}]}]}], ")"}]}], "=", 
       RowBox[{
        SubscriptBox["f", "tt"], "+", 
        RowBox[{
         SubscriptBox["f", "yt"], "f"}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["f", "ty"], "+", 
           SubscriptBox["f", "yy"]}], ")"}], "f"}], "+", 
        RowBox[{
         SubscriptBox["f", "y"], "(", 
         RowBox[{
          SubscriptBox["f", "t"], "+", 
          RowBox[{
           SubscriptBox["f", "y"], "f"}]}], ")"}]}]}]}]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "f86ddaab-71b8-48a4-81cc-1db7431108f1"],
 "\nthis looks like it is rapidly becoming unwieldy!"
}], "Text",
 CellChangeTimes->{{3.876218993157848*^9, 
  3.8762193107813396`*^9}},ExpressionUUID->"5b556e97-b81d-466f-bfa2-\
2506dde0951f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Q12:", "Section",
 CellChangeTimes->{{3.876213901627921*^9, 
  3.8762139112487593`*^9}},ExpressionUUID->"2d489485-e04f-4a87-9246-\
c046204473e2"],

Cell["More transfer orbits. ", "Text",
 CellChangeTimes->{{3.8762148214419208`*^9, 
  3.876214827911585*^9}},ExpressionUUID->"847c2d46-0d0c-479d-bb63-\
361c92a04c83"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Md", "=", "0.012277471"}], ";", " ", 
  RowBox[{"Ed", "=", 
   RowBox[{"1", "-", "Md"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TMax", "=", "29.4602"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"xSol", ",", "ySol"}], "}"}], "=", 
   RowBox[{"NDSolveValue", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"r1", "[", "t", "]"}], "=", 
         SqrtBox[
          RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{
              RowBox[{"x", "[", "t", "]"}], "+", "Md"}], ")"}], "2"], "+", 
           SuperscriptBox[
            RowBox[{"y", "[", "t", "]"}], "2"]}]]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"r2", "[", "t", "]"}], "=", 
         SqrtBox[
          RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{
              RowBox[{"x", "[", "t", "]"}], "-", "Ed"}], ")"}], "2"], "+", 
           SuperscriptBox[
            RowBox[{"y", "[", "t", "]"}], "2"]}]]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"x", "''"}], "[", "t", "]"}], "==", 
         RowBox[{
          RowBox[{"2", 
           RowBox[{
            RowBox[{"y", "'"}], "[", "t", "]"}]}], "+", 
          RowBox[{"x", "[", "t", "]"}], "-", 
          RowBox[{"Ed", "*", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"x", "[", "t", "]"}], "+", "Md"}], ")"}], "/", 
            SuperscriptBox[
             RowBox[{"r1", "[", "t", "]"}], "3"]}]}], "-", 
          RowBox[{"Md", "*", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"x", "[", "t", "]"}], "-", "Ed"}], ")"}], "/", 
            SuperscriptBox[
             RowBox[{"r2", "[", "t", "]"}], "3"]}]}]}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"y", "''"}], "[", "t", "]"}], "==", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "2"}], 
          RowBox[{
           RowBox[{"x", "'"}], "[", "t", "]"}]}], "+", 
         RowBox[{"y", "[", "t", "]"}], "-", 
         RowBox[{"Ed", "*", 
          RowBox[{
           RowBox[{"y", "[", "t", "]"}], "/", 
           SuperscriptBox[
            RowBox[{"r1", "[", "t", "]"}], "3"]}]}], "-", 
         RowBox[{"Md", "*", 
          RowBox[{
           RowBox[{"y", "[", "t", "]"}], "/", 
           SuperscriptBox[
            RowBox[{"r2", "[", "t", "]"}], "3"]}]}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"x", "[", "0", "]"}], "==", "1.15"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"y", "[", "0", "]"}], "==", "0"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"x", "'"}], "[", "0", "]"}], "==", "0"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"y", "'"}], "[", "0", "]"}], "==", "0.00868829090"}]}], 
      "\[IndentingNewLine]", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", " ", "0", ",", " ", "TMax"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Pic12R", "=", 
   RowBox[{"ParametricPlot", "[", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"xSol", "[", "t", "]"}], ",", 
       RowBox[{"ySol", "[", "t", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"t", ",", " ", "0", ",", "TMax"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Pic12NR", "=", 
   RowBox[{"ParametricPlot", "[", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Rot", "[", "t", "]"}], ".", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "Md"}], ",", "0"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"Rot", "[", "t", "]"}], ".", 
        RowBox[{"{", 
         RowBox[{"Ed", ",", "0"}], "}"}]}], ",", 
       RowBox[{
        RowBox[{"Rot", "[", "t", "]"}], ".", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"xSol", "[", "t", "]"}], ",", 
          RowBox[{"ySol", "[", "t", "]"}]}], "}"}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"t", ",", " ", "0", ",", "TMax"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Rot", "[", "t_", "]"}], ":=", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {
       RowBox[{"Cos", "[", "t", "]"}], 
       RowBox[{"-", 
        RowBox[{"Sin", "[", "t", "]"}]}]},
      {
       RowBox[{"Sin", "[", "t", "]"}], 
       RowBox[{"Cos", "[", "t", "]"}]}
     }], "\[NoBreak]", ")"}]}], " "}], "\n", 
 RowBox[{"TabView", "[", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\"\<Rotating\>\"", "->", "Pic12R"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Non Rotating\>\"", "->", 
     RowBox[{"Manipulate", "[", 
      RowBox[{
       RowBox[{"Show", "[", 
        RowBox[{"Pic12NR", ",", " ", 
         RowBox[{"Epilog", "->", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"PointSize", "[", "0.03", "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"Red", ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Rot", "[", "t", "]"}], ".", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"xSol", "[", "t", "]"}], ",", 
                  RowBox[{"ySol", "[", "t", "]"}]}], "}"}]}], "]"}]}], "}"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"Black", ",", 
              RowBox[{"Point", "[", 
               RowBox[{
                RowBox[{"Rot", "[", "t", "]"}], ".", 
                RowBox[{"{", 
                 RowBox[{"Ed", ",", "0"}], "}"}]}], "]"}]}], "}"}]}], 
           "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", " ", "TMax"}], "}"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.875872103119974*^9, 3.875872106993719*^9}, {
  3.875872140243219*^9, 3.8758722712899747`*^9}, {3.875877584005863*^9, 
  3.8758776921067886`*^9}, {3.875877722467037*^9, 3.875877796720946*^9}, {
  3.8758778302237244`*^9, 3.8758779322449474`*^9}, {3.8758779726244645`*^9, 
  3.8758780059479747`*^9}, {3.8758780451791863`*^9, 3.8758781450090404`*^9}, {
  3.8758782161602993`*^9, 3.875878338065097*^9}, {3.875881606804262*^9, 
  3.875881690931841*^9}, {3.87588173007542*^9, 3.875881867133318*^9}, {
  3.875881899867467*^9, 3.8758819253982706`*^9}, {3.8758823477168455`*^9, 
  3.8758823678260136`*^9}, {3.8762139250205545`*^9, 3.8762139391430407`*^9}, {
  3.876214005371783*^9, 3.8762140259949937`*^9}, {3.8762140632787704`*^9, 
  3.8762142257509675`*^9}},
 CellLabel->
  "In[247]:=",ExpressionUUID->"3acdc5c9-11c0-49d1-bb93-b8e227242495"],

Cell[BoxData[
 TabViewBox[{{1,"\<\"Rotating\"\>"->
  GraphicsBox[{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], FaceForm[Opacity[0.3]], LineBox[CompressedData["
1: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
dg==
        "]]},
      Annotation[#, "Charting`Private`Tag$398144#1"]& ]}, {}},
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{
    "DefaultGraphicsInteraction" -> {
      "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
       "Effects" -> {
        "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
         "Droplines" -> {
          "freeformCursorMode" -> True, 
           "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
     "ScalingFunctions" -> None},
   PlotRange->{{-0.7323690530858367, 1.150029462109086}, {-0.7364007108506535,
     0.7363954184261268}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.05], 
      Scaled[0.05]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}]}, {2,"\<\"Non Rotating\"\>"->
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`t$$ = 0, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{
       Hold[$CellContext`t$$], 0, 29.4602}}, Typeset`size$$ = {
     360., {168., 171.81112572281427`}}, Typeset`update$$ = 0, 
     Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`t$$ = 0}, 
       "ControllerVariables" :> {}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> 
       Show[$CellContext`Pic12NR, Epilog -> {
           PointSize[0.03], {Red, 
            Point[
             Dot[
              $CellContext`Rot[$CellContext`t$$], {
               $CellContext`xSol[$CellContext`t$$], 
               $CellContext`ySol[$CellContext`t$$]}]]}, {Black, 
            Point[
             Dot[
              $CellContext`Rot[$CellContext`t$$], {$CellContext`Ed, 0}]]}}], 
       "Specifications" :> {{$CellContext`t$$, 0, 29.4602}}, "Options" :> {}, 
       "DefaultOptions" :> {}],
      ImageSizeCache->{409., {211.134033203125, 216.865966796875}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]]}}, 1]], "Output",
 CellChangeTimes->{{3.8758816679913177`*^9, 3.8758816932964735`*^9}, {
   3.8758818312026625`*^9, 3.8758818740050635`*^9}, {3.8758819286445312`*^9, 
   3.875881934212182*^9}, {3.8758823623679743`*^9, 3.8758823689566064`*^9}, 
   3.8762137375564575`*^9, {3.8762139137438993`*^9, 3.876213958272458*^9}, 
   3.876214005947228*^9, 3.8762140408372793`*^9, 3.8762141340433683`*^9, 
   3.876214168972517*^9, {3.876214205824052*^9, 3.876214226548232*^9}, 
   3.876214906687853*^9},
 CellLabel->
  "Out[253]=",ExpressionUUID->"9e9c88b2-da63-4d3b-b010-aa9d8dc31566"]
}, Open  ]],

Cell["\<\
Lets see what the \[OpenCurlyDoubleQuote]data\[CloseCurlyDoubleQuote] that \
defines the curves looks like! \
\>", "Text",
 CellChangeTimes->{{3.876214554364626*^9, 
  3.8762145741853976`*^9}},ExpressionUUID->"94cdde35-ad56-4c5b-b019-\
106aab58f7c2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"xSol", "[", "\"\<Methods\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tVals", "=", 
   RowBox[{
    RowBox[{"xSol", "[", "\"\<Coordinates\>\"", "]"}], "\[LeftDoubleBracket]",
     "1", "\[RightDoubleBracket]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xSol", "[", "\"\<ValuesOnGrid\>\"", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.876214243040197*^9, 3.8762145031050787`*^9}, {
  3.8762145392396517`*^9, 3.8762145403189116`*^9}},
 CellLabel->
  "In[254]:=",ExpressionUUID->"ad9a0a02-92b2-4210-9602-45e17f23eb28"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Coordinates\"\>", ",", "\<\"DerivativeOrder\"\>", 
   ",", "\<\"Domain\"\>", ",", "\<\"ElementMesh\"\>", ",", "\<\"Evaluate\"\>",
    ",", "\<\"GetPolynomial\"\>", ",", "\<\"Grid\"\>", 
   ",", "\<\"InterpolationMethod\"\>", ",", "\<\"InterpolationOrder\"\>", 
   ",", "\<\"MethodInformation\"\>", ",", "\<\"Methods\"\>", 
   ",", "\<\"OutputDimensions\"\>", ",", "\<\"Periodicity\"\>", 
   ",", "\<\"PlottableQ\"\>", ",", "\<\"Properties\"\>", 
   ",", "\<\"QuantityUnits\"\>", ",", "\<\"Unpack\"\>", 
   ",", "\<\"ValuesOnGrid\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.876214246483528*^9, 3.876214317313622*^9}, {
   3.876214348062523*^9, 3.8762144096653185`*^9}, {3.8762144495055027`*^9, 
   3.8762145036214695`*^9}, 3.876214911424308*^9},
 CellLabel->
  "Out[254]=",ExpressionUUID->"ce9866e9-34d7-4fd8-beb6-3b3c61e0a822"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ListLogPlot", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"tVals", "\[LeftDoubleBracket]", 
       RowBox[{"i", "+", "1"}], "\[RightDoubleBracket]"}], "-", 
      RowBox[{
      "tVals", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{
        RowBox[{"Length", "[", "tVals", "]"}], "-", "1"}]}], "}"}]}], "]"}], 
   ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Frame", "->", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.876214547671011*^9},ExpressionUUID->"0507268b-ab80-41f4-aaac-\
96f50d479a28"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowToolbars->{"RulerBar", "EditBar"},
WindowSize->{1141, 605},
WindowMargins->{{1463.5, Automatic}, {242.5, Automatic}},
TaggingRules->Association["TryRealOnly" -> False],
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (May 11, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c7978ad3-d634-4918-817c-0f0639ca2596"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 168, 3, 98, "Title",ExpressionUUID->"cfe02285-7314-4cf7-afc8-b2cfe098c8c5"],
Cell[CellGroupData[{
Cell[773, 29, 247, 4, 69, "Chapter",ExpressionUUID->"d6141ec4-7b22-4563-abc5-619cd38f3e36"],
Cell[1023, 35, 1720, 44, 127, "Text",ExpressionUUID->"f2a5fa57-86bc-4e20-b6a0-fba8bfcb25fc"],
Cell[CellGroupData[{
Cell[2768, 83, 233, 4, 67, "Section",ExpressionUUID->"23c9e758-370c-4cea-9850-b132f79b4c73"],
Cell[3004, 89, 2248, 68, 184, "Text",ExpressionUUID->"0ca66a3b-99b1-4f4d-920c-716efb9c1d5d"],
Cell[5255, 159, 171, 3, 35, "Text",ExpressionUUID->"f2f92ad0-0aed-484f-8294-6d6d1dd5f1bc"],
Cell[CellGroupData[{
Cell[5451, 166, 1365, 37, 124, "Input",ExpressionUUID->"4a31a1d9-0a4e-46a7-9dfa-c441d332c84b"],
Cell[6819, 205, 1268, 32, 52, "Output",ExpressionUUID->"1d9b0314-3617-4acd-a5da-53a64bd38f10"],
Cell[8090, 239, 1634, 42, 243, "Output",ExpressionUUID->"c5cd2a59-bace-4917-98c0-b4fa6c390d3d"]
}, Open  ]],
Cell[9739, 284, 556, 10, 58, "Text",ExpressionUUID->"9c9f4187-b15b-4799-8fab-619916f54d62"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10332, 299, 373, 6, 67, "Section",ExpressionUUID->"9f85497e-0a25-4d0c-a92f-da594f2baf02"],
Cell[10708, 307, 3222, 103, 212, "Text",ExpressionUUID->"eb40bd3e-f6f4-438e-98a8-733e39cce0b2",
 InitializationCell->True],
Cell[13933, 412, 3278, 106, 160, "Text",ExpressionUUID->"fc704761-b0a4-44f4-a061-50970a93ff5a"],
Cell[17214, 520, 221, 4, 35, "Text",ExpressionUUID->"1db8daee-738e-4496-98d8-23265f3f9fe4"],
Cell[CellGroupData[{
Cell[17460, 528, 2244, 60, 183, "Input",ExpressionUUID->"30a662e8-9a11-4978-9d11-48670079c504"],
Cell[19707, 590, 1407, 33, 52, "Output",ExpressionUUID->"5b08c54b-062a-427e-8b69-27b16d678204"],
Cell[21117, 625, 1781, 43, 243, "Output",ExpressionUUID->"28c52614-f9a2-4667-ada6-ed8b357b6f94"]
}, Open  ]],
Cell[22913, 671, 228, 5, 35, "Text",ExpressionUUID->"4f957534-85f9-4023-89d0-559413617dd5"],
Cell[CellGroupData[{
Cell[23166, 680, 2651, 75, 183, "Input",ExpressionUUID->"d6d26731-d070-44fd-94c5-1445827d06a7"],
Cell[25820, 757, 1412, 33, 52, "Output",ExpressionUUID->"313a683e-77a7-4773-9c6a-f8490e1ba130"],
Cell[27235, 792, 1792, 44, 243, "Output",ExpressionUUID->"63cbfb66-34c0-4524-8a86-c9b83d197a4d"]
}, Open  ]],
Cell[29042, 839, 2744, 90, 132, "Text",ExpressionUUID->"5b556e97-b81d-466f-bfa2-2506dde0951f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31823, 934, 151, 3, 67, "Section",ExpressionUUID->"2d489485-e04f-4a87-9246-c046204473e2"],
Cell[31977, 939, 166, 3, 35, "Text",ExpressionUUID->"847c2d46-0d0c-479d-bb63-361c92a04c83"],
Cell[CellGroupData[{
Cell[32168, 946, 7100, 194, 561, "Input",ExpressionUUID->"3acdc5c9-11c0-49d1-bb93-b8e227242495"],
Cell[39271, 1142, 46665, 788, 496, "Output",ExpressionUUID->"9e9c88b2-da63-4d3b-b010-aa9d8dc31566"]
}, Open  ]],
Cell[85951, 1933, 260, 6, 35, "Text",ExpressionUUID->"94cdde35-ad56-4c5b-b019-106aab58f7c2"],
Cell[CellGroupData[{
Cell[86236, 1943, 568, 12, 67, "Input",ExpressionUUID->"ad9a0a02-92b2-4210-9602-45e17f23eb28"],
Cell[86807, 1957, 875, 15, 52, "Output",ExpressionUUID->"ce9866e9-34d7-4fd8-beb6-3b3c61e0a822"]
}, Open  ]],
Cell[87697, 1975, 734, 20, 28, "Input",ExpressionUUID->"0507268b-ab80-41f4-aaac-96f50d479a28"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

